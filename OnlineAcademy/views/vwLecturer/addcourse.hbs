{{#section 'css'}}

{{!-- ----------- --}}
{{!-- Import ZONE --}}
{{!-- ----------- --}}
<!-- Filepond stylesheet -->
<link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
<link rel="stylesheet" href="/views/assets/css/filepond-custom.css" type="text/css">
<link rel="stylesheet" href="/views/assets/css/quilljs-custom.css" type="text/css">

{{/section}}

{{#section 'js'}}

{{!-- ----------- --}}
{{!-- Import ZONE --}}
{{!-- ----------- --}}
<!-- Load FilePond library -->
<script src="https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js"></script>
<script src="https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js"></script>
<script src="https://unpkg.com/filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.js">
</script>
<script src="https://unpkg.com/filepond-plugin-file-rename/dist/filepond-plugin-file-rename.js"></script>
<script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
<script src="https://unpkg.com/filepond/dist/filepond.js"></script>
<!-- Include the Quill library -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<!-- Load sweet alert and jQuery ajax-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<!-- Turn all file input elements into ponds -->
<script>
    // Register the plugin with FilePond
    FilePond.registerPlugin(
        FilePondPluginImagePreview,
        FilePondPluginFileValidateSize,
        FilePondPluginFileValidateType,
        FilePondPluginImageValidateSize,
        FilePondPluginFileRename
    );

    FilePond.setOptions({
        server: {
            process: (fieldName, file, metadata, load, error, progress, abort, transfer, options) => {

                
                //console.log(file);
                //console.log(file.name);
                
                // fieldName is the name of the input field
                // file is the actual file object to send

                var func = (fieldName, file, callback) => {
                    console.log("Send Data");
                    const formData = new FormData();
                    const request = new XMLHttpRequest();
                    formData.append(fieldName, file, file.name);

                    request.open('POST', '/lecturer/upload');

                    request.upload.onprogress = (e) => {
                        console.log("On Progress");
                        progress(e.lengthComputable, e.loaded, e.total);
                    };
                    request.upload.onloadend = (e) => {
                        console.log("On Load End");
                        callback();
                    };

                    request.onload = function () {
                        console.log("On load");
                        if (request.status >= 200 && request.status < 300) {
                            // the load method accepts either a string (id) or an object
                            load(request.responseText);
                        }
                        else {
                            error('oh no');
                        }
                    };
                    request.send(formData);
                    
                };

                let key = 0;
                if (file.type === "video/mp4") {
                    key = parseInt(file.name.replace(".mp4", ""));
                    file.name = `${key}.mp4`;
                }
                const data = {
                    callbackSubmit: func,
                    fieldName: fieldName,
                    file: file
                }
                if (fieldName === "mainVideo") {
                    AddMainVideo(key, data);
                }
                else if (fieldName === "previewVideo") {
                    AddPreviewVideo(key, data);
                }
                else {
                    console.log("Add Image " + key);
                    pondImageCover = data;
                }

                return {
                    abort: () => {
                        console.log("Cancel");
                        abort();
                        if (key === 0) {
                            return pondImageCover = null;
                        }
                        return fieldName === "mainVideo" ? DeleteMainnVideo(key) : DeletePreviewVideo(key);
                    }
                };
            }
            
        }
    });

    
    // Get a reference to the file input element
    const inputElementPondCoverImage = document.querySelector('input[type="file"]#main-information-cover-img');

    
    // Create the FilePond instance
    const pondCoverImage = FilePond.create(inputElementPondCoverImage, {
        maxFileSize: '10MB',
        imagePreviewHeight: 500,
        acceptedFileTypes: ['image/*'],
        fileRenameFunction: (file) => {
            return `cover${file.extension}`;
        },
        imageValidateSizeMinWidth: 600,
        imageValidateSizeMinHeight: 400
    });

    function InitPond(element, number) {
        
        const index = 1;
        const inputElementPondCourseVideo = document.querySelectorAll('input[type="file"]#main-information-course-video')[index];
        const inputElementPondPreviewVideo = document.querySelectorAll('input[type="file"]#main-information-preview-video')[index];


        const pondCourseVideo = FilePond.create(inputElementPondCourseVideo, {
            acceptedFileTypes: ['video/*'],
            fileRenameFunction: (file) => {
                console.log("Change name " + `${number}${file.extension}`);
                return `${number}${file.extension}`;
            }
        });

        const pondPreviewVideo = FilePond.create(inputElementPondPreviewVideo, {
            acceptedFileTypes: ['video/*'],
            fileRenameFunction: (file) => {
                console.log("Change name " + `${number}${file.extension}`);
                return `${number}${file.extension}`;
            }
        });
        
        return {
            element: element,
            courseVideo: pondCourseVideo,
            previewVideo: pondPreviewVideo
        }
    }
    // Initialize Quill editor
    var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'], // toggled buttons
        ['blockquote', 'code-block'],

        [{
            'header': 1
        }, {
            'header': 2
        }], // custom button values

        [{
            'list': 'ordered'
        }, {
            'list': 'bullet'
        }],

        [{
            'script': 'sub'
        }, {
            'script': 'super'
        }], // superscript/subscript

        [{
            'indent': '-1'
        }, {
            'indent': '+1'
        }], // outdent/indent

        [{
            'direction': 'rtl'
        }], // text direction

        [{
            'size': ['small', false, 'large', 'huge']
        }], // custom dropdown

        [{
            'header': [1, 2, 3, 4, 5, 6, false]
        }],

        [{
            'color': []
        }, {
            'background': []
        }], // dropdown with defaults from theme

        [{
            'font': []
        }],

        [{
            'align': []
        }],

        ['clean'] // remove formatting button
    ];

    var quill = new Quill('#editor', {
        modules: {
            toolbar: toolbarOptions
        },
        theme: 'snow'
    });
</script>

<script>
    var numOfSection = 0;
    var mainContent = jQuery("#main-information-content");
    var courseSections = new Map();
    var pondMainVideo = new Map();
    var pondPreviewVideo = new Map();
    var pondImageCover = null;
    var numOfTaskDone = 0;
    var infoCourse = null;
    function DisplayError(message) {
        swal(message, {
            icon: "error",
            buttons: "OK",
        });
    }
    function CheckValidInput(cName,shortDesc,desc,price,lectureName) {
        if (cName.length === 0) {
            DisplayError("Course name is empty!");
            return false;
        }
        if (shortDesc.length === 0) {
            DisplayError("Short description is empty!");
            return false;
        }
        if (desc.length === 0) {
            DisplayError("Description is empty!");
            return false;
        }
        if (price.length === 0) {
            DisplayError("Price is empty!");
            return false;
        }
        for (var i = 0; i < lectureName.length; i++) {
            if (lectureName[i].length === 0) {
                DisplayError(`Lecture name ${i + 1} is empty`);
                return false;
            }
        }
        if (!pondImageCover) {
            DisplayError("Course image is empty!");
            return false;
        }
        return true;
    }
    function AddNewCourseSubmit() {
        const courseName = jQuery('#main-information-name').val();
        const field = jQuery('#main-information-field').val();
        const subField = jQuery('#main-information-subfield').val();
        const shortDescription = jQuery('#main-information-sdesc').val();
        const description = jQuery('#editor').children(".ql-editor")[0].innerHTML;
        const price = jQuery('#main-information-fee').val();
        const status = jQuery('#main-information-status').val();
        const lectureName = [];

        document.querySelectorAll('#main-information-lecture').forEach(function (ele,index) {
            if (index !== 0) {
                lectureName.push(ele.value);
            }
        })
        if (CheckValidInput(courseName, shortDescription, description, price, lectureName)) {
            infoCourse = {
                courseName: courseName,
                field: field,
                subField: subField,
                shortDescription: shortDescription,
                description: description,
                price: price,
                status: status,
                lectureName: lectureName
            }
            let i = 1;
            for (var [key, value] of courseSections) {
                if (pondPreviewVideo.get(key)) {
                    pondPreviewVideo.get(key).file.name = `${i}.mp4`;
                }
                if (!pondMainVideo.get(key)) {
                    return DisplayError(`Section ${i} miss main video`);
                }
                pondMainVideo.get(key).file.name = `${i}.mp4`;
                i++;
            }
            swal({
                title: "Are you sure?",
                text: "Please confirm your choice!",
                icon: "info",
                buttons: true,
            }).then((value) => {
                if (value) {
                    pondImageCover.callbackSubmit(pondImageCover.fieldName, pondImageCover.file, OnTaskDone);
                    for (var [key, value] of courseSections) {
                        let data = pondMainVideo.get(key);
                        data.callbackSubmit(data.fieldName, data.file, OnTaskDone);
                        data = pondPreviewVideo.get(key);
                        if (data) {
                            data.callbackSubmit(data.fieldName, data.file, OnTaskDone);
                        }
                    }
                }
            });
        }
    }

    function OnTaskDone() {
        numOfTaskDone++;
        if (numOfTaskDone === (pondMainVideo.size + pondPreviewVideo.size + 1)) {
            return $.post('/lecturer/addCourse', infoCourse, function (err, status) {
                if (!err) {
                    swal("Add to watch list successfully!", {
                        icon: "success",
                        text: "Add course successfully",
                        buttons: true,
                    }).then((value) => {
                        location.reload();
                    });
                } else {
                    DisplayError(err);
                }
            });
        }
    }

    function AddNewSection() {
        numOfSection++;

        var element = jQuery("#main-information-section-list").clone();
        element.removeAttr("hidden");
        element.children("#list-btn")[0].textContent = "Section " + (courseSections.size + 1);
        element.children("#delete-list-btn").val(numOfSection);
        element.appendTo(mainContent[0]);
        element.children("#delete-list-btn").on("click", function () {
            const tmp = parseInt(this.value);
            courseSections.delete(tmp);
            DeleteMainnVideo(tmp);
            DeletePreviewVideo(tmp);
            let i = 1;
            for (var [key, value] of courseSections) {
                value.element.children("#list-btn")[0].textContent = "Section " + i;
                i++;
            }
            this.parentElement.remove();
        });
        courseSections.set(numOfSection, InitPond(element, numOfSection));

    }
    function DeleteMainnVideo(key) {
        if (pondMainVideo.get(key)) {
            console.log("Delete main video " + key);
            pondMainVideo.delete(key);
        }
    }
    function AddMainVideo(key, data) {
        console.log("Add main video " + key);
        pondMainVideo.set(key, data);
    }
    function DeletePreviewVideo(key) {
        if (pondPreviewVideo.get(key)) {
            console.log("Delete preview video " + key);
            pondPreviewVideo.delete(key);
        }
    }
    function AddPreviewVideo(key, data) {
        console.log("Add preview video " + key);
        pondPreviewVideo.set(key, data);
    }

    function OnFieldChange(sel) {
        document.querySelectorAll("#main-information-subfield option").forEach((ele, index) => {
            if (ele.getAttribute("id") === sel.value) {
                ele.removeAttribute("hidden");
                ele.parentNode.value = ele.value;
            }
            else {
                ele.setAttribute("hidden", null);
            }
        });
    }

</script>

{{/section}}

<!-- Header -->
<header id="head" class="secondary">
    <div class="container">

        <h1>Profile</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing eliras scele!</p>

    </div>
</header>
<!-- ./Header -->
<!-- Main -->
<!-- Main panel -->
<div class="container-fluid">
    <div class="row">

        <div class="col-md-3">
            <div id="user-sidebar" class="panel panel-default sidebar-categories">
                <div class="panel-heading">My account</div>

                <div class="list-group">
                    <a href="/lecturer/info" class="list-group-item">
                        Profile
                    </a>

                    <a href="/lecturer/lectures" class="list-group-item">
                        My Courses
                        <span class="badge">{{lecturesSize}}</span>
                    </a>

                    <a href="#currentpage" class="list-group-item active">
                        Add New Course
                    </a>

                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div id="user-information" class="panel panel-default main-categories">

                <div class="panel-heading">
                    <div id="heading-information-container" class="container-fluid">

                        <div id="heading-information-container-row-profile" class="row">
                            <div id="heading-information-profile" class="col-md-3">
                                Add new course
                            </div>
                            <div id="heading-information-btn-group" class="col-md-9">
                                <a id="heading-information-save-password-btn" class="btn btn-success" type="submit"
                                    form="add-new-course" href="javascript: AddNewCourseSubmit();">
                                    Add
                                </a>
                            </div>
                        </div>

                    </div>
                </div>

                <div id="main-information-container" class="container-fluid">
                    <form id="add-new-course" method="POST" action="/lecturer/addCourse" enctype="multipart/form-data">
                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-cover-img">
                                    Cover image (Image type; 600x400
                                    above; &leq;10MB)
                                </label>
                                <input name="coverImage" type="file" id="main-information-cover-img">
                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-name">Course name</label>
                                <input name="courseName" id="main-information-name" type="text" class="form-control" maxlength="70">
                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-field">Field</label>
                                <div id="main-information-field-container" class="container-fluid">
                                    <select id="main-information-field" name="field" class="form-control" onchange="OnFieldChange(this);">
                                        {{#each listCourseFields}}
                                        <option value="{{this.name}}">{{this.name}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-field">SubField</label>
                                <div id="main-information-field-container" class="container-fluid">
                                    <select id="main-information-subfield" name="subField" class="form-control">
                                        {{#each listCourseFields}}
                                        {{#each listTheme}}
                                        {{#if (eq ../name "Business")}}
                                        <option id="{{../name}}" value="{{name}}">{{name}}</option>
                                        {{else}}
                                        <option id="{{../name}}" value="{{name}}" hidden>{{name}}</option>
                                        {{/if}}
                                        {{/each}}
                                        {{/each}}
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-sdesc">Short description</label>
                                <input name="shortDescription" id="main-information-sdesc" type="text"
                                       class="form-control" maxlength="100">
                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-desc">Description</label>
                                <div id="editor" name="description"></div>

                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-fee">Tuition Fee</label>
                                <input name="fee" id="main-information-fee" type="text" class="form-control" onkeypress="return /[0-9]/i.test(event.key)" maxlength="10" >
                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-content">Syllabus/Content</label>

                                <div id="main-information-content" class="list-group container-fluid">
                                    <div id="main-information-section-list" class="list-item" hidden>
                                        <button type="button" id="delete-list-btn" class="btn btn-danger content-btn">
                                            Delete
                                        </button>
                                        <button type="button" id="list-btn" class="btn btn-primary content-btn">
                                            Section 1
                                        </button>

                                        <ul id="mainContent" class="showContent container-fluid">
                                            <li>
                                                <label id="main-label" for="main-information-lecture">
                                                    Lecture
                                                    Name
                                                </label>
                                                <input name="lecture" id="main-information-lecture" type="text"
                                                       class="form-control" maxlength="50">
                                            </li>
                                            <li>
                                                <label id="main-label" for="main-information-lecture-video">
                                                    Lecture
                                                    video
                                                </label>
                                                <input name="mainVideo" type="file" id="main-information-course-video">
                                            </li>
                                            <li>
                                                <label id="main-label" for="main-information-lecture-preview">
                                                    Lecture
                                                    preview
                                                </label>
                                                <input name="previewVideo" type="file"
                                                       id="main-information-preview-video">
                                            </li>


                                            <!--<div id="delete-content-btn-container" class="container-fluid">
                            <button type="button" id="delete-content-btn"
                                class="btn btn-danger content-btn">
                                delete lecture
                            </button>
                        </div>--}}-->

                                        </ul>

                                        <!--<div id="add-list-btn-container" class="container-fluid">
                        <button type="button" id="add-list-btn" class="btn btn-success content-btn">
                            Add new lecture
                        </button>
                    </div>-->

                                    </div>

                                </div>

                                <div id="add-course-btn-container" class="container-fluid">
                                    <button type="button" id="add-course-btn" class="btn btn-success" onclick="AddNewSection()">
                                        Add new section
                                    </button>
                                </div>

                            </div>
                        </div>

                        <div class="row">
                            <div id="main-information-input-group" class="input-group form-group">
                                <label id="main-label" for="main-information-status">Status</label>

                                <div id="main-information-status-container" class="container-fluid">
                                    <select id="main-information-status" name="status" class="form-control">
                                        <option value="complete">Complete</option>
                                        <option value="incomplete">Incomplete</option>
                                    </select>
                                </div>

                            </div>
                        </div>
                    </form>
                </div>

            </div>

        </div>

    </div>

</div>